(define fov-overlay (lambda (camera)
					  (lambda (x-offset y-offset)
						(for-each (lambda (e)
									(for-each (lambda (f)
												(let ((a (appearance f)))
												  (if (on-camera? camera (x f) (y f))
													  (draw-character (- (x f) x-offset) (- (y f) y-offset) (representation a) (fore-colour a) (back-colour a)))))
											  (seen-entities e))
									(for-each (lambda (c)
												(if (on-camera? camera (car c) (cdr c))
													(set-back-colour! (- (car c) x-offset) (- (cdr c) y-offset) '(100 100 0) BKGND_ADDA
																	  (expt (/ (- (sight-radius e) (distance (position e) c)) (sight-radius e)) 2))))
											  (seen-space e)))
								  (filter (lambda (x) (is-a? x <can-see>)) (entities m))))))

(define path-overlay (lambda (camera)
					   (lambda (x-offset y-offset)
						 (for-each (lambda (e)
									 (for-each (lambda (c)
												 (if (on-camera? camera (car c) (cdr c))
													 (set-back-colour! (- (car c) x-offset) (- (cdr c) y-offset) '(100 0 0) BKGND_ADD)))
											   (path->list (path e))))
								   (filter (lambda (x) (is-a? x <can-move>)) (entities m))))))